// You are using GCC
#include<stdio.h>
#include<stdlib.h>
struct node{
    int data,height;
    struct node *left,*right;
}*root=NULL;
int max(int a,int b);
int height(struct node *N)
{
    if(N==NULL)
        return 0;
    return N->height;
}
int max(int a,int b){
    return (a>b)?a:b;
}
struct node *create(int a){
    struct node *n=(struct node*)malloc(sizeof(struct node));
    n->data=a;
    n->left=n->right=NULL;
    n->height=1;
    return n;
}
struct node *rightRotate(struct node *y){
    struct node *x=y->left;
    struct node *t2=x->right;
    x->right=y;
    y->left=t2;
    y->height=max(height(y->left),height(y->right))+1;
    x->height=max(height(x->left),height(x->right))+1;
    return x;
}
struct node *leftRotate(struct node *x){
    struct node *y=x->right;
    struct node *t2=y->left;
    y->left=x;
    x->right=t2;
    x->height=max(height(x->left),height(x->right))+1;
    y->height=max(height(y->left),height(y->right))+1;
    return y;
}
int getbalance(struct node *N){
    if(N==NULL)
        return 0;
    return height(N->left)-height(N->right);    
}
struct node *insert(struct node *root,int d){
    if(root==NULL)
        return create(d);
    if(d<root->data)
        root->left=insert(root->left,d);
    else if(d>root->data)
        root->right=insert(root->right,d);
    else
        return root;
        
    root->height=max(height(root->left),height(root->right))+1;
    int balance=getbalance(root);
    if(balance>1 && d<root->left->data){
    return rightRotate(root);
    }
    if(balance<-1 && d>root->right->data){
    return leftRotate(root);
    }
    if(balance>1 && d>root->left->data){
    root->left=leftRotate(root->left);
    return rightRotate(root);
    }
    if(balance<-1 && d<root->right->data){
        root->right=rightRotate(root->right);
        return leftRotate(root);
    }
    return root;
}
void preorder(struct node *root){
    if(root!=NULL){
        printf("%d ",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
int main(){
    int i,n,e;
    scanf("%d",&n);
    for(i=0;i<n;i++){
        scanf("%d",&e);
        root=insert(root,e);
    }
    preorder(root);
}